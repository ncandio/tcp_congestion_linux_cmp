#!/usr/bin/env python3
"""
TCP Congestion Algorithm Comparison Plotter

This script generates comparison plots between different TCP congestion control
algorithms using the data from the CSV files generated by the tcp_comparison_linux tool.
"""

import sys
import os
import pandas as pd
import matplotlib.pyplot as plt
import argparse
import numpy as np

def load_data(throughput_file, latency_file):
    """Load data from throughput and latency CSV files"""
    try:
        throughput_data = pd.read_csv(throughput_file)
        latency_data = pd.read_csv(latency_file)
        return throughput_data, latency_data
    except Exception as e:
        print(f"Error loading CSV files: {e}")
        sys.exit(1)

def plot_throughput_comparison(data, fixed_latency=None, output_dir="plots"):
    """Plot throughput comparison for all algorithms at a given latency"""
    # Filter by latency if specified
    if fixed_latency is not None:
        data = data[data['Latency'] == fixed_latency]
    
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    # Get all algorithms (column names except Bandwidth and Latency)
    algs = [col for col in data.columns if col not in ['Bandwidth', 'Latency']]
    
    plt.figure(figsize=(12, 8))
    
    for alg in algs:
        # Skip if all values are NaN
        if data[alg].isna().all():
            continue
        
        # Plot bandwidth vs throughput for this algorithm
        plt.plot(data['Bandwidth'], data[alg], marker='o', linewidth=2, label=alg)
    
    lat_label = f" (Latency: {fixed_latency}ms)" if fixed_latency is not None else ""
    plt.title(f"TCP Congestion Control Algorithm Throughput Comparison{lat_label}", fontsize=14)
    plt.xlabel("Bandwidth (Mbps)", fontsize=12)
    plt.ylabel("Throughput (Mbps)", fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.legend(fontsize=12)
    
    # Save figure
    filename = f"throughput_comparison"
    if fixed_latency is not None:
        filename += f"_latency_{fixed_latency}ms"
    plt.savefig(os.path.join(output_dir, f"{filename}.png"), dpi=300, bbox_inches='tight')
    print(f"Saved plot to {os.path.join(output_dir, filename)}.png")
    plt.close()

def plot_latency_comparison(data, fixed_latency=None, output_dir="plots"):
    """Plot latency comparison for all algorithms at a given latency configuration"""
    # Filter by latency if specified
    if fixed_latency is not None:
        data = data[data['Latency'] == fixed_latency]
    
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    # Get all algorithms (column names except Bandwidth and Latency)
    algs = [col for col in data.columns if col not in ['Bandwidth', 'Latency']]
    
    plt.figure(figsize=(12, 8))
    
    for alg in algs:
        # Skip if all values are NaN
        if data[alg].isna().all():
            continue
        
        # Plot bandwidth vs latency for this algorithm
        plt.plot(data['Bandwidth'], data[alg], marker='o', linewidth=2, label=alg)
    
    lat_label = f" (Latency: {fixed_latency}ms)" if fixed_latency is not None else ""
    plt.title(f"TCP Congestion Control Algorithm Measured Latency Comparison{lat_label}", fontsize=14)
    plt.xlabel("Bandwidth (Mbps)", fontsize=12)
    plt.ylabel("Measured Latency (ms)", fontsize=12)
    plt.grid(True, alpha=0.3)
    plt.legend(fontsize=12)
    
    # Save figure
    filename = f"latency_comparison"
    if fixed_latency is not None:
        filename += f"_latency_{fixed_latency}ms"
    plt.savefig(os.path.join(output_dir, f"{filename}.png"), dpi=300, bbox_inches='tight')
    print(f"Saved plot to {os.path.join(output_dir, filename)}.png")
    plt.close()

def plot_heatmap(throughput_data, output_dir="plots"):
    """Create heatmap showing throughput differences between algorithms"""
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    # Get all algorithms (column names except Bandwidth and Latency)
    algs = [col for col in throughput_data.columns if col not in ['Bandwidth', 'Latency']]
    
    # Need at least 2 algorithms to compare
    if len(algs) < 2:
        print("Need at least 2 algorithms to create a comparison heatmap")
        return
    
    # Create pivoted dataframe for heatmap
    pivot_data = throughput_data.pivot(index='Bandwidth', columns='Latency', values=algs[0])
    
    # Create the heatmap for the first algorithm
    plt.figure(figsize=(12, 10))
    
    # Plot the heatmap
    heatmap = plt.pcolormesh(
        pivot_data.columns, 
        pivot_data.index, 
        pivot_data.values, 
        cmap='viridis', 
        shading='auto'
    )
    
    plt.colorbar(heatmap, label='Throughput (Mbps)')
    plt.title(f"Throughput Heatmap for {algs[0]}", fontsize=14)
    plt.xlabel("Latency (ms)", fontsize=12)
    plt.ylabel("Bandwidth (Mbps)", fontsize=12)
    
    # Save the heatmap
    filename = f"throughput_heatmap_{algs[0]}"
    plt.savefig(os.path.join(output_dir, f"{filename}.png"), dpi=300, bbox_inches='tight')
    print(f"Saved heatmap to {os.path.join(output_dir, filename)}.png")
    plt.close()
    
    # Create comparison heatmaps for each pair of algorithms
    for i in range(len(algs) - 1):
        for j in range(i + 1, len(algs)):
            alg1 = algs[i]
            alg2 = algs[j]
            
            # Create a new dataframe with the difference
            diff_data = pd.pivot_table(
                throughput_data, 
                values=[alg1, alg2], 
                index='Bandwidth', 
                columns='Latency'
            )
            
            # Calculate the percentage difference
            alg1_data = diff_data[alg1]
            alg2_data = diff_data[alg2]
            pct_diff = (alg1_data - alg2_data) / ((alg1_data + alg2_data) / 2) * 100
            
            # Create the heatmap
            plt.figure(figsize=(12, 10))
            
            # Use a diverging colormap with red and blue
            heatmap = plt.pcolormesh(
                pct_diff.columns, 
                pct_diff.index, 
                pct_diff.values, 
                cmap='RdBu_r', 
                shading='auto',
                vmin=-30,  # Limit the range to +/- 30%
                vmax=30
            )
            
            plt.colorbar(heatmap, label='Throughput Difference (%)')
            plt.title(f"Throughput Comparison: {alg1} vs {alg2}", fontsize=14)
            plt.xlabel("Latency (ms)", fontsize=12)
            plt.ylabel("Bandwidth (Mbps)", fontsize=12)
            
            # Save the heatmap
            filename = f"throughput_comparison_{alg1}_vs_{alg2}"
            plt.savefig(os.path.join(output_dir, f"{filename}.png"), dpi=300, bbox_inches='tight')
            print(f"Saved comparison heatmap to {os.path.join(output_dir, filename)}.png")
            plt.close()

def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Generate TCP Congestion Control comparison plots")
    parser.add_argument('--throughput', default='throughput_vs_bandwidth.csv',
                        help='Path to throughput CSV file (default: throughput_vs_bandwidth.csv)')
    parser.add_argument('--latency', default='latency_vs_bandwidth.csv',
                        help='Path to latency CSV file (default: latency_vs_bandwidth.csv)')
    parser.add_argument('--output', default='plots',
                        help='Output directory for plots (default: plots/)')
    args = parser.parse_args()
    
    # Load data from CSV files
    throughput_data, latency_data = load_data(args.throughput, args.latency)
    
    # Get unique latency values
    latencies = throughput_data['Latency'].unique()
    
    # Generate plots for each latency value
    for latency in latencies:
        plot_throughput_comparison(throughput_data, latency, args.output)
        plot_latency_comparison(latency_data, latency, args.output)
    
    # Generate overall plots
    plot_throughput_comparison(throughput_data, None, args.output)
    plot_latency_comparison(latency_data, None, args.output)
    
    # Generate heatmaps
    plot_heatmap(throughput_data, args.output)
    
    print("All plots generated successfully!")

if __name__ == "__main__":
    main()